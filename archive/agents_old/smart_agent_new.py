"""
üéØ SUPER ADMINISTRADOR - RED SOLUCIONES ISP
==========================================

Asistente ejecutivo profesional para administraci√≥n empresarial
- An√°lisis avanzado de negocio y operaciones
- Gesti√≥n estrat√©gica de clientes y recursos
- Reportes ejecutivos y m√©tricas clave
- Supervisi√≥n integral del sistema ISP

Sistema: Red Soluciones ISP v2.0 Enterprise
Rol: Super Administrador Ejecutivo
"""

import json
import logging
import re
import os
from typing import Dict, List, Any, Optional
from datetime import datetime

# === CONFIGURACI√ìN GEMINI AI ===
try:
    import google.generativeai as genai
    
    api_key = os.getenv("GEMINI_API_KEY")
    if api_key and len(api_key) > 20:
        genai.configure(api_key=api_key)
        GEMINI_AVAILABLE = True
        logging.info("üéØ IA Empresarial: Sistema operacional")
    else:
        GEMINI_AVAILABLE = False
        logging.error("‚ùå API Key de IA requerida para operaci√≥n completa")
except ImportError:
    GEMINI_AVAILABLE = False
    logging.error("‚ùå M√≥dulo IA no disponible")
except Exception as e:
    GEMINI_AVAILABLE = False
    logging.error(f"‚ùå Error configurando IA: {e}")

# === CLASE PRINCIPAL ===
class SmartISPAgent:
    """
    üéØ SUPER ADMINISTRADOR - Red Soluciones ISP
    
    Asistente ejecutivo profesional con capacidades avanzadas:
    - An√°lisis estrat√©gico de negocio
    - Supervisi√≥n operacional completa  
    - Gesti√≥n inteligente de recursos
    - Reportes ejecutivos automatizados
    """
    
    def __init__(self, sheets_service=None):
        """Inicializar Super Administrador"""
        self.sheets_service = sheets_service
        self.logger = logging.getLogger(__name__)
        
        # === CONFIGURACI√ìN EMPRESARIAL ===
        self.role = "SUPER_ADMINISTRADOR"
        self.company = "Red Soluciones ISP"
        self.access_level = "EJECUTIVO"
        
        # === CONFIGURACI√ìN IA EMPRESARIAL ===
        self.gemini_model = None
        if GEMINI_AVAILABLE:
            try:
                self.gemini_model = genai.GenerativeModel(
                    'gemini-1.5-flash',
                    system_instruction=self._get_admin_persona()
                )
                self.logger.info("üéØ IA Empresarial: Sistema operacional")
            except Exception as e:
                self.logger.error(f"‚ùå Error configurando IA: {e}")
        
        # === RESPUESTAS EJECUTIVAS ===
        self.executive_responses = {
            "greeting": "üéØ **Super Administrador** - Red Soluciones ISP\n**Sistema empresarial activo**. ¬øQu√© an√°lisis necesita?",
            "unauthorized": "‚õî **Acceso Restringido** - Funci√≥n de nivel ejecutivo",
            "success": "‚úÖ **Operaci√≥n completada** exitosamente",
            "error": "‚ùå **Error operacional** - Revisar logs del sistema",
            "processing": "‚ö° **Procesando** solicitud ejecutiva..."
        }
        
        # === M√âTRICAS EMPRESARIALES ===
        self.business_metrics = {
            "target_monthly_revenue": 150000,
            "standard_plan": 350,
            "premium_plan": 500,
            "enterprise_plan": 750,
            "target_clients": 400,
            "churn_threshold": 5
        }
        
        self.logger.info("üéØ Super Administrador: Sistema inicializado")

    def _get_admin_persona(self) -> str:
        """Definir la personalidad del Super Administrador"""
        return """Eres el SUPER ADMINISTRADOR de Red Soluciones ISP.

PERSONALIDAD:
- Profesional, ejecutivo y directo
- Respuestas breves y precisas (m√°ximo 3 l√≠neas)
- Enfoque en m√©tricas y resultados de negocio
- Lenguaje empresarial y t√©cnico apropiado

CAPACIDADES:
- An√°lisis financiero y operacional
- Supervisi√≥n de clientes y prospectos
- Gesti√≥n de incidentes cr√≠ticos
- Reportes ejecutivos y KPIs

ESTILO DE RESPUESTA:
- Usar emojis profesionales: üìä üìà ‚ö° üéØ üíº
- Informaci√≥n clave primero
- Sugerencias de acci√≥n espec√≠ficas
- Sin explicaciones extensas

CONTEXTO: Red Soluciones ISP - Proveedor de internet empresarial"""

    # ================================================================
    # M√âTODO PRINCIPAL DE PROCESAMIENTO
    # ================================================================

    def process_query(self, query: str) -> Dict[str, Any]:
        """
        üéØ Procesador ejecutivo de consultas
        
        An√°lisis inteligente con respuesta profesional y breve
        """
        try:
            query_clean = query.strip().lower()
            
            # An√°lisis de intenci√≥n empresarial
            intent = self._analyze_business_intent(query_clean)
            
            # Procesamiento ejecutivo seg√∫n intenci√≥n
            return self._execute_admin_action(intent, query_clean, query)
                
        except Exception as e:
            self.logger.error(f"Error en procesamiento ejecutivo: {e}")
            return {
                "response": "‚ùå **Error operacional** - Sistema revisando logs",
                "type": "error",
                "suggestions": ["üìä Dashboard", "üîç Estado sistema", "‚ùì Ayuda"]
            }

    def _analyze_business_intent(self, query: str) -> str:
        """An√°lisis de intenci√≥n empresarial"""
        
        # Comandos ejecutivos directos
        if any(x in query for x in ["stats", "estad√≠sticas", "m√©tricas", "kpi", "dashboard"]):
            return "executive_dashboard"
        
        if "cliente:" in query or any(x in query for x in ["registrar cliente", "nuevo cliente", "alta cliente"]):
            return "client_registration"
            
        if "prospecto:" in query or any(x in query for x in ["nuevo prospecto", "lead", "prospecto"]):
            return "prospect_registration"
            
        if any(x in query for x in ["incidente", "problema", "falla", "reporte"]):
            return "incident_management"
            
        if any(x in query for x in ["buscar", "encontrar", "localizar"]):
            return "search_operation"
            
        if any(x in query for x in ["ayuda", "help", "comandos", "manual"]):
            return "admin_help"
            
        if any(x in query for x in ["an√°lisis", "reporte", "informe", "resumen"]):
            return "business_analysis"
            
        # Default: saludo ejecutivo
        return "executive_greeting"

    def _execute_admin_action(self, intent: str, query_clean: str, original_query: str) -> Dict[str, Any]:
        """Ejecutar acci√≥n administrativa"""
        
        if intent == "executive_dashboard":
            return self._get_executive_dashboard()
        elif intent == "client_registration":
            return self._handle_client_registration(original_query)
        elif intent == "prospect_registration":
            return self._handle_prospect_registration(original_query)
        elif intent == "incident_management":
            return self._handle_incident_management(original_query)
        elif intent == "search_operation":
            return self._handle_search_operation(original_query)
        elif intent == "business_analysis":
            return self._get_business_analysis()
        elif intent == "admin_help":
            return self._get_admin_help()
        else:
            return self._get_executive_greeting()

    # ================================================================
    # OPERACIONES EJECUTIVAS
    # ================================================================

    def _get_executive_dashboard(self) -> Dict[str, Any]:
        """Dashboard ejecutivo con m√©tricas clave"""
        try:
            if self.sheets_service:
                # Obtener datos reales
                clients = self.sheets_service.get_clients()
                prospects = self.sheets_service.get_prospects()
                
                total_clients = len(clients) if clients else 0
                total_prospects = len(prospects) if prospects else 0
                
                # C√°lculos empresariales
                monthly_revenue = total_clients * self.business_metrics["standard_plan"]
                target_percentage = (monthly_revenue / self.business_metrics["target_monthly_revenue"]) * 100
                growth_potential = total_prospects
                
                response = f"""üìä **Dashboard Ejecutivo**

üíº **Estado Actual:**
‚Ä¢ Clientes: {total_clients} | Meta: {self.business_metrics["target_clients"]}
‚Ä¢ Revenue: ${monthly_revenue:,} ({target_percentage:.1f}% meta)
‚Ä¢ Pipeline: {total_prospects} prospectos
‚ö° **Oportunidad:** ${growth_potential * self.business_metrics["standard_plan"]:,} potencial"""
                
                suggestions = ["üìà An√°lisis detallado", "üë• Gesti√≥n clientes", "üéØ Prospectos", "üìã Reportes"]
            else:
                response = "üìä **Dashboard Ejecutivo**\n‚ö° Conectando con sistema de datos..."
                suggestions = ["üîÑ Reintentar", "üîß Estado sistema"]
                
            return {
                "response": response,
                "type": "dashboard",
                "suggestions": suggestions
            }
        except Exception as e:
            self.logger.error(f"Error dashboard ejecutivo: {e}")
            return {
                "response": "‚ùå **Error Dashboard** - Sistema verificando conexiones",
                "type": "error",
                "suggestions": ["üîÑ Reintentar", "üîß Diagn√≥stico"]
            }

    def _handle_client_registration(self, query: str) -> Dict[str, Any]:
        """Manejo de registro de clientes"""
        if self.gemini_model:
            try:
                prompt = f"""Como Super Administrador de Red Soluciones ISP, procesa este registro:
"{query}"

Extrae: nombre, tel√©fono, zona, plan (est√°ndar/premium)
Responde en m√°ximo 2 l√≠neas con confirmaci√≥n profesional."""

                response = self.gemini_model.generate_content(prompt)
                ai_response = response.text.strip()
                
                return {
                    "response": f"‚úÖ **Cliente Procesado**\n{ai_response}",
                    "type": "client_registration",
                    "suggestions": ["üìä Ver dashboard", "üë• M√°s clientes", "üîç Buscar cliente"]
                }
            except Exception as e:
                self.logger.error(f"Error IA registro cliente: {e}")
        
        # Fallback sin IA
        return {
            "response": "üìù **Registro Cliente** - Formato: cliente: [Nombre], [Tel], [Zona]",
            "type": "client_info",
            "suggestions": ["üìä Dashboard", "‚ùì Ayuda", "üîç Buscar"]
        }

    def _handle_prospect_registration(self, query: str) -> Dict[str, Any]:
        """Manejo de registro de prospectos"""
        if self.gemini_model:
            try:
                prompt = f"""Como Super Administrador, procesa este prospecto:
"{query}"

Extrae: nombre, tel√©fono, zona, prioridad
Responde confirmaci√≥n profesional en m√°ximo 2 l√≠neas."""

                response = self.gemini_model.generate_content(prompt)
                ai_response = response.text.strip()
                
                return {
                    "response": f"üéØ **Prospecto Registrado**\n{ai_response}",
                    "type": "prospect_registration", 
                    "suggestions": ["üìä Pipeline", "üéØ M√°s prospectos", "üìû Seguimiento"]
                }
            except Exception as e:
                self.logger.error(f"Error IA registro prospecto: {e}")
        
        return {
            "response": "üéØ **Nuevo Prospecto** - Formato: prospecto: [Nombre], [Tel], [Zona]",
            "type": "prospect_info",
            "suggestions": ["üìä Dashboard", "‚ùì Ayuda"]
        }

    def _handle_search_operation(self, query: str) -> Dict[str, Any]:
        """Manejo de b√∫squedas"""
        search_term = re.sub(r'buscar|encontrar|localizar', '', query).strip()
        
        if len(search_term) > 2:
            return {
                "response": f"üîç **B√∫squeda Ejecutiva**\nBuscando: '{search_term}' en base de datos...",
                "type": "search",
                "suggestions": ["üìä Dashboard", "üë• Todos los clientes", "üéØ Prospectos"]
            }
        else:
            return {
                "response": "üîç **B√∫squeda** - Especifique t√©rmino: buscar [nombre/tel√©fono]",
                "type": "search_help",
                "suggestions": ["üìä Dashboard", "üë• Lista clientes"]
            }

    def _get_business_analysis(self) -> Dict[str, Any]:
        """An√°lisis de negocio avanzado"""
        if self.gemini_model:
            try:
                prompt = """Como Super Administrador de Red Soluciones ISP, genera un an√°lisis ejecutivo:

1. Estado financiero actual
2. Oportunidades de crecimiento  
3. M√©tricas clave
4. Recomendaciones estrat√©gicas

M√°ximo 4 l√≠neas, profesional y directo."""

                response = self.gemini_model.generate_content(prompt)
                ai_response = response.text.strip()
                
                return {
                    "response": f"üìà **An√°lisis Ejecutivo**\n{ai_response}",
                    "type": "business_analysis",
                    "suggestions": ["üìä Dashboard", "üìã Reportes", "üéØ Estrategias"]
                }
            except Exception as e:
                self.logger.error(f"Error an√°lisis IA: {e}")
        
        return {
            "response": "üìà **An√°lisis Empresarial**\nGenerando reporte ejecutivo...",
            "type": "analysis",
            "suggestions": ["üìä Dashboard", "üìã M√©tricas", "üíº KPIs"]
        }

    def _handle_incident_management(self, query: str) -> Dict[str, Any]:
        """Manejo de incidentes cr√≠ticos"""
        if self.gemini_model:
            try:
                prompt = f"""Como Super Administrador de Red Soluciones ISP, procesa este incidente:
"{query}"

Clasifica: t√©cnico/comercial/facturaci√≥n
Prioridad: alta/media/baja
Responde en m√°ximo 2 l√≠neas con plan de acci√≥n."""

                response = self.gemini_model.generate_content(prompt)
                ai_response = response.text.strip()
                
                return {
                    "response": f"üö® **Incidente Registrado**\n{ai_response}",
                    "type": "incident",
                    "suggestions": ["üîß Seguimiento", "üìä Dashboard", "üìã M√°s incidentes"]
                }
            except Exception as e:
                self.logger.error(f"Error IA incidente: {e}")
        
        return {
            "response": "üö® **Gesti√≥n Incidentes** - Formato: incidente: [descripci√≥n problema]",
            "type": "incident_info",
            "suggestions": ["üìä Dashboard", "‚ùì Ayuda"]
        }

    def _get_executive_greeting(self) -> Dict[str, Any]:
        """Saludo ejecutivo profesional"""
        return {
            "response": self.executive_responses["greeting"],
            "type": "greeting",
            "suggestions": ["üìä Dashboard", "üë• Clientes", "üìà An√°lisis", "üîç Buscar"]
        }

    def _get_admin_help(self) -> Dict[str, Any]:
        """Comandos disponibles para super administrador"""
        help_text = """üéØ **Comandos Super Administrador:**

**üìä Ejecutivos:** `stats` | `an√°lisis` | `m√©tricas`
**üë• Operaciones:** `cliente: [datos]` | `prospecto: [datos]`  
**üîç Consultas:** `buscar [t√©rmino]` | `estado sistema`"""

        return {
            "response": help_text,
            "type": "help",
            "suggestions": ["üìä Dashboard", "üë• Nuevo cliente", "üîç Buscar", "üìà An√°lisis"]
        }

# ================================================================
# FUNCIONES DE INICIALIZACI√ìN
# ================================================================

# Variable global para instancia √∫nica
_smart_agent_instance = None

def initialize_smart_agent(sheets_service=None):
    """Inicializar el agente inteligente"""
    global _smart_agent_instance
    try:
        _smart_agent_instance = SmartISPAgent(sheets_service)
        logging.info("üéØ Super Administrador inicializado exitosamente")
        return True
    except Exception as e:
        logging.error(f"‚ùå Error inicializando Super Administrador: {e}")
        return False

def get_smart_agent():
    """Obtener instancia del agente"""
    return _smart_agent_instance
