#!/bin/bash

# Red Soluciones ISP - Script de Deploy Autom√°tico
# Configura y despliega el sistema con credenciales

echo "üöÄ RED SOLUCIONES ISP - DEPLOY AUTOM√ÅTICO"
echo "=========================================="

# Funci√≥n para verificar si un comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Verificar Python
if ! command_exists python3; then
    echo "‚ùå Error: Python3 no est√° instalado"
    exit 1
fi

# Verificar si estamos en el directorio correcto
if [ ! -f "app.py" ]; then
    echo "‚ùå Error: No se encontr√≥ app.py. Ejecuta desde el directorio del proyecto."
    exit 1
fi

echo "‚úÖ Directorio del proyecto verificado"

# Verificar/crear entorno virtual
if [ ! -d ".venv" ]; then
    echo "üì¶ Creando entorno virtual..."
    python3 -m venv .venv
    echo "‚úÖ Entorno virtual creado"
else
    echo "‚úÖ Entorno virtual encontrado"
fi

# Activar entorno virtual
echo "üîß Activando entorno virtual..."
source .venv/bin/activate

# Instalar dependencias
echo "üìö Instalando dependencias..."
pip install -r requirements.txt > /dev/null 2>&1
echo "‚úÖ Dependencias instaladas"

# Verificar/configurar credenciales
echo "üîë Verificando credenciales..."
if [ ! -f ".env" ]; then
    echo "‚ö†Ô∏è  No se encontr√≥ archivo .env"
    echo "üîß Iniciando configuraci√≥n autom√°tica..."
    python3 configurar_credenciales.py
else
    echo "‚úÖ Archivo .env encontrado"
    python3 verificar_credenciales.py
fi

# Verificar importaciones
echo "üîç Verificando sistema..."
python3 -c "
import sys
sys.path.insert(0, '.')
try:
    from backend.app.main import app
    print('‚úÖ Sistema verificado correctamente')
except Exception as e:
    print(f'‚ùå Error en verificaci√≥n: {e}')
    sys.exit(1)
" || exit 1

# Opciones de deploy
echo ""
echo "üéØ OPCIONES DE DEPLOY:"
echo "1) Desarrollo local (uvicorn)"
echo "2) Producci√≥n Vercel"
echo "3) Solo verificar sistema"
echo ""

read -p "Selecciona una opci√≥n (1-3): " option

case $option in
    1)
        echo "üñ•Ô∏è  Iniciando servidor de desarrollo..."
        echo "üåê URL: http://localhost:8004"
        echo "‚èπÔ∏è  Presiona Ctrl+C para detener"
        echo ""
        python3 -m uvicorn backend.app.main:app --host 0.0.0.0 --port 8004 --reload
        ;;
    2)
        if command_exists vercel; then
            echo "‚òÅÔ∏è  Desplegando en Vercel..."
            
            # Configurar variables de entorno en Vercel
            if [ -f ".env" ]; then
                echo "‚ö° Configurando variables de entorno en Vercel..."
                
                # Leer variables del .env y configurarlas en Vercel
                while IFS= read -r line; do
                    if [[ $line =~ ^[A-Z_]+=.* ]] && [[ ! $line =~ ^# ]]; then
                        var_name=$(echo "$line" | cut -d'=' -f1)
                        var_value=$(echo "$line" | cut -d'=' -f2-)
                        echo "Setting $var_name..."
                        echo "$var_value" | vercel env add "$var_name" production
                    fi
                done < .env
            fi
            
            # Deploy
            vercel --prod
            echo "üéâ Deploy completado!"
        else
            echo "‚ùå Vercel CLI no est√° instalado"
            echo "üì• Instalar con: npm i -g vercel"
        fi
        ;;
    3)
        echo "‚úÖ Sistema verificado y listo"
        echo "üìñ Para iniciar: python3 app.py"
        ;;
    *)
        echo "‚ùå Opci√≥n no v√°lida"
        exit 1
        ;;
esac

echo ""
echo "üéâ Proceso completado!"
echo "üìñ Consulta CONFIGURACION_CREDENCIALES.md para m√°s informaci√≥n"
