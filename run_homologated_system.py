#!/usr/bin/env python3
"""
üöÄ EJECUTOR DEL SISTEMA HOMOLOGADO - Red Soluciones ISP v4.0
==========================================================

Script principal para ejecutar el sistema completamente homologado.
Incluye inicializaci√≥n autom√°tica, verificaci√≥n de salud y monitoreo.

Uso:
    python run_homologated_system.py
    python run_homologated_system.py --port 8004
    python run_homologated_system.py --dev
    python run_homologated_system.py --check-config
"""

import asyncio
import sys
import argparse
import signal
import os
from pathlib import Path
import uvicorn
from datetime import datetime

# Agregar el directorio actual al path
sys.path.insert(0, str(Path(__file__).parent))

# Configurar variables de entorno antes de importar
os.environ.setdefault('PYTHONPATH', str(Path(__file__).parent))

try:
    from backend.app.core.homologated_config import settings
    from backend.app.utils.logger import get_logger
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Verifica que est√©s en el directorio correcto y que las dependencias est√©n instaladas")
    sys.exit(1)

class HomologatedSystemRunner:
    """Ejecutor del sistema homologado completo"""
    
    def __init__(self):
        self.logger = get_logger("SystemRunner")
        self.server_process = None
        self.shutdown_event = asyncio.Event()
        
    async def run_system(self, port=None, dev_mode=False, check_config_only=False):
        """Ejecutar sistema completo"""
        
        print("üöÄ RED SOLUCIONES ISP v4.0 HOMOLOGADO")
        print("=" * 50)
        print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üåç Entorno: {settings.ENVIRONMENT}")
        print(f"üêõ Debug: {'Activado' if settings.DEBUG else 'Desactivado'}")
        print("=" * 50)
        
        try:
            # 1. Verificar configuraci√≥n
            if not await self.verify_system_config():
                print("‚ùå Configuraci√≥n inv√°lida. No se puede continuar.")
                return False
                
            if check_config_only:
                print("‚úÖ Configuraci√≥n verificada exitosamente")
                return True
            
            # 2. Inicializar sistema
            if not await self.initialize_system():
                print("‚ùå Error en inicializaci√≥n. No se puede continuar.")
                return False
            
            # 3. Ejecutar servidor
            port = port or settings.PORT
            await self.start_server(port, dev_mode)
            
            return True
            
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è Deteniendo sistema...")
            await self.graceful_shutdown()
            return True
        except Exception as e:
            self.logger.error(f"Error cr√≠tico: {e}")
            print(f"üí• Error cr√≠tico: {e}")
            return False
    
    async def verify_system_config(self):
        """Verificar configuraci√≥n del sistema"""
        print("üìã Verificando configuraci√≥n...")
        
        try:
            validation = settings.validate_config()
            
            if validation['valid']:
                print("‚úÖ Configuraci√≥n v√°lida")
                
                # Mostrar resumen
                summary = validation.get('config_summary', {})
                print(f"   üìä Sheets configuradas: {'‚úÖ' if summary.get('sheets_configured') else '‚ùå'}")
                print(f"   ü§ñ IA disponible: {'‚úÖ' if summary.get('ai_available') else '‚ö†Ô∏è'}")
                print(f"   üë• Propietarios: {summary.get('owners_count', 0)}")
                print(f"   üìã Hojas: {summary.get('sheets_count', 0)}")
                
                if validation.get('warnings'):
                    print("‚ö†Ô∏è Advertencias:")
                    for warning in validation['warnings']:
                        print(f"   ‚Ä¢ {warning}")
                
                return True
            else:
                print("‚ùå Problemas de configuraci√≥n:")
                for issue in validation['issues']:
                    print(f"   ‚Ä¢ {issue}")
                return False
                
        except Exception as e:
            self.logger.error(f"Error verificando configuraci√≥n: {e}")
            print(f"‚ùå Error verificando configuraci√≥n: {e}")
            return False
    
    async def initialize_system(self):
        """Inicializar sistema completo"""
        print("üîß Inicializando sistema homologado...")
        
        try:
            # Importar m√≥dulos principales
            from backend.app.services.sheets.service import SheetsServiceV2
            from backend.app.services.context_engine import ContextEngine
            from backend.app.services.enhanced_agent import HomologatedAIAgent
            
            print("   üìä Configurando Google Sheets...")
            sheets_service = SheetsServiceV2()
            
            print("   üß† Inicializando Context Engine...")
            context_engine = ContextEngine(sheets_service)
            
            print("   ü§ñ Configurando Enhanced AI Agent...")
            enhanced_agent = HomologatedAIAgent(context_engine, sheets_service)
            
            # Validar servicios b√°sicos
            if not sheets_service:
                raise Exception("Google Sheets Service no disponible")
            
            print("‚úÖ Sistema inicializado exitosamente")
            return True
            
        except Exception as e:
            self.logger.error(f"Error inicializando sistema: {e}")
            print(f"‚ùå Error inicializando sistema: {e}")
            return False
    
    async def start_server(self, port, dev_mode):
        """Iniciar servidor FastAPI"""
        print(f"üåê Iniciando servidor en puerto {port}...")
        
        try:
            # Configuraci√≥n del servidor
            config = uvicorn.Config(
                app="backend.app.main:app",
                host=settings.HOST,
                port=port,
                log_level="info" if not dev_mode else "debug",
                reload=dev_mode,
                access_log=True,
                loop="asyncio"
            )
            
            server = uvicorn.Server(config)
            
            print(f"üéØ Servidor iniciado:")
            print(f"   üåç URL: http://{settings.HOST}:{port}")
            print(f"   üì± Dashboard: http://{settings.HOST}:{port}/frontend/index.html")
            print(f"   üîÑ Modo desarrollo: {'‚úÖ' if dev_mode else '‚ùå'}")
            print("=" * 50)
            print("üí° Para detener el servidor, presiona Ctrl+C")
            print("=" * 50)
            
            # Configurar manejador de se√±ales
            def signal_handler(sig, frame):
                print("\n‚èπÔ∏è Se√±al de interrupci√≥n recibida...")
                asyncio.create_task(self.graceful_shutdown())
            
            signal.signal(signal.SIGINT, signal_handler)
            signal.signal(signal.SIGTERM, signal_handler)
            
            # Ejecutar servidor
            await server.serve()
            
        except Exception as e:
            self.logger.error(f"Error ejecutando servidor: {e}")
            print(f"üí• Error ejecutando servidor: {e}")
            raise
    
    async def graceful_shutdown(self):
        """Apagado graceful del sistema"""
        print("\nüîÑ Iniciando apagado graceful...")
        
        try:
            # Aqu√≠ se pueden agregar tareas de limpieza
            print("   üìä Limpiando recursos...")
            
            # Guardar logs finales
            print("   üìù Guardando logs finales...")
            
            print("‚úÖ Sistema detenido exitosamente")
            
        except Exception as e:
            self.logger.error(f"Error en apagado graceful: {e}")
            print(f"‚ö†Ô∏è Error en apagado: {e}")
        
        # Marcar evento de apagado
        self.shutdown_event.set()

def print_help():
    """Mostrar ayuda del sistema"""
    print("""
üöÄ RED SOLUCIONES ISP v4.0 HOMOLOGADO - AYUDA
============================================

COMANDOS DISPONIBLES:
  python run_homologated_system.py              # Ejecutar sistema normal
  python run_homologated_system.py --dev        # Modo desarrollo
  python run_homologated_system.py --port 8005  # Puerto personalizado
  python run_homologated_system.py --check      # Solo verificar configuraci√≥n
  
CARACTER√çSTICAS DEL SISTEMA:
  ‚úÖ Backend Google Sheets integrado
  ‚úÖ IA Empresarial con Gemini
  ‚úÖ Context Engine inteligente
  ‚úÖ Dashboard reactivo en tiempo real
  ‚úÖ Sistema de autenticaci√≥n Eduardo/Omar
  ‚úÖ Chat IA con contexto completo
  ‚úÖ Insights autom√°ticos de negocio

REQUISITOS:
  - Python 3.8+
  - Google Sheets configurado
  - Variables de entorno configuradas
  - Dependencias instaladas (requirements.txt)

CONFIGURACI√ìN:
  - GOOGLE_SHEET_ID: ID de la hoja de Google Sheets
  - GEMINI_API_KEY: Clave API de Google Gemini (opcional)
  - PORT: Puerto del servidor (default: 8004)
  - DEBUG: Modo debug (true/false)

SOPORTE:
  - Logs: ./logs/
  - Configuraci√≥n: ./backend/app/core/homologated_config.py
  - Inicializaci√≥n: ./init_homologated_system.py
""")

def main():
    """Funci√≥n principal"""
    parser = argparse.ArgumentParser(
        description="Red Soluciones ISP v4.0 Homologado - Sistema Empresarial Completo",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument(
        '--port', '-p',
        type=int,
        default=None,
        help=f'Puerto del servidor (default: {settings.PORT})'
    )
    
    parser.add_argument(
        '--dev', '-d',
        action='store_true',
        help='Modo desarrollo (hot reload, debug)'
    )
    
    parser.add_argument(
        '--check', '-c',
        action='store_true',
        help='Solo verificar configuraci√≥n'
    )
    
    parser.add_argument(
        '--help-system',
        action='store_true',
        help='Mostrar ayuda detallada del sistema'
    )
    
    args = parser.parse_args()
    
    if args.help_system:
        print_help()
        return
    
    # Ejecutar sistema
    runner = HomologatedSystemRunner()
    
    try:
        success = asyncio.run(runner.run_system(
            port=args.port,
            dev_mode=args.dev,
            check_config_only=args.check
        ))
        
        if success:
            if not args.check:
                print("\nüëã ¬°Hasta luego!")
            sys.exit(0)
        else:
            print("\nüí• El sistema no pudo ejecutarse correctamente")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Sistema detenido por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• Error cr√≠tico: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
