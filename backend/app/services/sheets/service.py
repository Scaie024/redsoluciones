"""
Servicio MEJORADO para Google Sheets - Versi√≥n 3.0
Sistema robusto con:
- Manejo de errores mejorado
- Timeouts configurables
- Reconexi√≥n autom√°tica
- Sistema de cach√© con invalidaci√≥n
- Circuit breaker para fallos
- M√©tricas de rendimiento
"""

import gspread
from pathlib import Path
from google.oauth2.service_account import Credentials
from google.api_core.exceptions import GoogleAPIError, ServiceUnavailable, GatewayTimeout
import time
import logging
import json
import random
import os
from typing import List, Dict, Any, Optional, Callable, TypeVar, Tuple, Union
from datetime import datetime, timedelta
from dataclasses import dataclass
from functools import wraps
import statistics
from tenacity import (
    retry,
    stop_after_attempt,
    wait_exponential,
    retry_if_exception_type,
    before_sleep_log,
    RetryCallState
)

# Tipos personalizados
T = TypeVar('T')
CacheKey = str
CacheValue = Any

@dataclass
class CacheEntry:
    value: Any
    expires_at: float
    metadata: dict = None

class CircuitBreakerError(Exception):
    """Excepci√≥n lanzada cuando el circuito est√° abierto"""
    pass

class SheetsServiceV2:
    """
    Servicio mejorado para interactuar con Google Sheets.
    
    Esta implementaci√≥n incluye caracter√≠sticas avanzadas para mejorar la confiabilidad y el rendimiento:
    
    Caracter√≠sticas principales:
    - Manejo autom√°tico de reconexiones con backoff exponencial
    - Sistema de cach√© con expiraci√≥n para reducir llamadas a la API
    - Circuit breaker para prevenir fallos en cascada
    - M√©tricas detalladas de rendimiento y errores
    - Reintentos autom√°ticos con jitter para evitar el efecto de tormenta
    - Logging detallado para diagn√≥stico
    
    Uso b√°sico:
        service = SheetsServiceV2()
        
        # Obtener todas las filas
        rows = service.get_all_rows()
        
        # Buscar una fila por ID
        row = service.get_row_by_id(123)
        
        # Agregar una nueva fila
        service.add_row({"ID": 123, "Nombre": "Ejemplo"})
        
        # Actualizar una fila existente
        service.update_row(123, {"Estado": "Completado"})
        
        # Eliminar una fila
        service.delete_row(123)
        
        # Buscar en todas las columnas
        results = service.search_rows("t√©rmino de b√∫squeda")
    
    Configuraci√≥n:
    - El servicio busca autom√°ticamente el archivo de credenciales en varias ubicaciones
    - Los tiempos de espera y reintentos son configurables mediante constantes de clase
    - El sistema de cach√© se puede habilitar/deshabilitar por operaci√≥n
    
    Manejo de errores:
    - Las excepciones de la API de Google se capturan y registran
    - Se proporciona informaci√≥n detallada en los logs
    - El circuit breaker evita sobrecargar el servicio en caso de fallos
    """
    
    # Configuraci√≥n de la hoja
    SHEET_ID = "1OZKZIpn6U1nCfrDM_yGmC6jKj6iLH_MQz814LjEBRMQ"
    
    # Configuraci√≥n de reintentos
    MAX_RETRIES = 3
    INITIAL_RETRY_DELAY = 1  # segundos
    MAX_RETRY_DELAY = 30  # segundos
    
    # Configuraci√≥n del circuit breaker
    CIRCUIT_BREAKER_MAX_FAILURES = 5
    CIRCUIT_BREAKER_RESET_TIMEOUT = 300  # segundos
    
    # Configuraci√≥n de cach√©
    DEFAULT_CACHE_TTL = 60  # segundos
    
    def __init__(self, logger: Optional[logging.Logger] = None):
        """
        Inicializa el servicio con configuraci√≥n por defecto.
        
        Args:
            logger: Instancia de logger personalizada. Si no se proporciona,
                   se crear√° una nueva instancia con el nombre del m√≥dulo.
        """
        self.logger = logger or logging.getLogger(f"{__name__}.SheetsServiceV2")
        
        # Configurar formato de logging si no hay manejadores configurados
        if not self.logger.handlers and logging.getLogger().level == logging.NOTSET:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.setLevel(logging.INFO)
        
        # Inicializar cliente y hoja de c√°lculo
        self.gc = None
        self.sheet = None
        self.sheet_id = self.SHEET_ID
        
        # Estado del circuit breaker
        self._circuit_state = {
            'failures': 0,          # N√∫mero de fallos consecutivos
            'last_failure': None,   # Marca de tiempo del √∫ltimo fallo
            'is_open': False        # Si el circuito est√° abierto
        }
        
        # Sistema de cach√© mejorado
        self._cache: Dict[CacheKey, CacheEntry] = {}
        self._cache_metrics = {
            'hits': 0,
            'misses': 0,
            'expired': 0,
            'size': 0
        }
        
        # Cach√© simple adicional para compatibilidad
        self._cache_timestamp = 0
        self._cache_duration = 60  # 60 segundos
        
        # M√©tricas de rendimiento
        self._performance_metrics = {
            'calls': [],
            'errors': [],
            'response_times': []
        }
        
        # Inicializar la conexi√≥n
        self._initialize_connection()
    
    def _check_circuit(self):
        """Verifica el estado del circuit breaker"""
        if not self._circuit_state['is_open']:
            return True
            
        last_failure = self._circuit_state['last_failure']
        if last_failure and (time.time() - last_failure) > self.CIRCUIT_BREAKER_RESET_TIMEOUT:
            self.logger.warning("üîÅ Intentando restablecer el circuit breaker")
            self._circuit_state = {
                'failures': 0,
                'last_failure': None,
                'is_open': False
            }
            return True
            
        return False
        
    def _record_failure(self):
        """Registra un fallo y actualiza el estado del circuit breaker"""
        self._circuit_state['failures'] += 1
        self._circuit_state['last_failure'] = time.time()
        
        if self._circuit_state['failures'] >= self.CIRCUIT_BREAKER_MAX_FAILURES:
            self._circuit_state['is_open'] = True
            self.logger.error(f"üö® Circuit breaker abierto despu√©s de {self._circuit_state['failures']} fallos")
    
    def _record_success(self):
        """Registra un √©xito y reinicia el contador de fallos"""
        if self._circuit_state['failures'] > 0:
            self.logger.info("‚úÖ Operaci√≥n exitosa, reiniciando contador de fallos")
            self._circuit_state['failures'] = 0
            self._circuit_state['last_failure'] = None
    
    # ===== M√âTODOS DE CACH√â =====
    
    def _get_cache_key(self, method_name: str, *args, **kwargs) -> str:
        """Genera una clave √∫nica para el cach√© basada en el m√©todo y argumentos"""
        args_str = json.dumps(args, default=str, sort_keys=True)
        kwargs_str = json.dumps(kwargs, default=str, sort_keys=True)
        return f"{method_name}:{args_str}:{kwargs_str}"
    
    def _get_from_cache(self, key: str) -> Optional[Any]:
        """Obtiene un valor del cach√© si existe y no ha expirado"""
        if key not in self._cache:
            self._cache_metrics['misses'] += 1
            return None
            
        entry = self._cache[key]
        
        # Verificar si la entrada ha expirado
        if time.time() > entry.expires_at:
            self._cache_metrics['expired'] += 1
            del self._cache[key]
            self._cache_metrics['size'] -= 1
            return None
            
        self._cache_metrics['hits'] += 1
        return entry.value
    
    def _set_cache(self, key: str, value: Any, ttl: Optional[int] = None) -> None:
        """Almacena un valor en el cach√© con un TTL opcional"""
        if ttl is None:
            ttl = self.DEFAULT_CACHE_TTL
            
        expires_at = time.time() + ttl
        self._cache[key] = CacheEntry(
            value=value,
            expires_at=expires_at,
            metadata={
                'stored_at': datetime.now().isoformat(),
                'ttl': ttl
            }
        )
        self._cache_metrics['size'] = len(self._cache)
    
    def clear_cache(self, pattern: Optional[str] = None) -> int:
        """Limpia el cach√©, opcionalmente filtrando por patr√≥n de clave"""
        if pattern is None:
            count = len(self._cache)
            self._cache.clear()
            self._cache_metrics['size'] = 0
            return count
            
        # Filtrar por patr√≥n
        to_delete = [k for k in self._cache if pattern in k]
        for k in to_delete:
            del self._cache[k]
            
        self._cache_metrics['size'] = len(self._cache)
        return len(to_delete)
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """Obtiene estad√≠sticas del cach√©"""
        return {
            'hits': self._cache_metrics['hits'],
            'misses': self._cache_metrics['misses'],
            'expired': self._cache_metrics['expired'],
            'size': self._cache_metrics['size'],
            'hit_ratio': (
                self._cache_metrics['hits'] / 
                (self._cache_metrics['hits'] + self._cache_metrics['misses'] + 1e-10)
            )
        }
    
    # ===== M√âTODOS DE OPERACIONES CON REINTENTOS =====
    
    def _execute_with_retry(
        self, 
        operation: Callable[..., T],
        *args,
        max_retries: Optional[int] = None,
        initial_delay: float = 1.0,
        max_delay: float = 30.0,
        **kwargs
    ) -> T:
        """
        Ejecuta una operaci√≥n con reintentos exponenciales y backoff.
        
        Args:
            operation: Funci√≥n a ejecutar
            *args: Argumentos posicionales para la funci√≥n
            max_retries: N√∫mero m√°ximo de reintentos (None para usar el valor por defecto)
            initial_delay: Tiempo de espera inicial en segundos
            max_delay: Tiempo m√°ximo de espera entre reintentos
            **kwargs: Argumentos con nombre para la funci√≥n
            
        Returns:
            El resultado de la operaci√≥n
            
        Raises:
            Exception: Si se agotan los reintentos
        """
        if max_retries is None:
            max_retries = self.MAX_RETRIES
            
        last_exception = None
        
        for attempt in range(max_retries + 1):
            try:
                start_time = time.time()
                result = operation(*args, **kwargs)
                elapsed = (time.time() - start_time) * 1000  # ms
                
                # Registrar m√©tricas de rendimiento
                self._record_metrics(operation.__name__, elapsed)
                
                # Si llegamos aqu√≠, la operaci√≥n fue exitosa
                self._record_success()
                return result
                
            except Exception as e:
                last_exception = e
                self._record_failure()
                
                # Registrar error
                self._record_error(operation.__name__, str(e))
                
                # Si no hay m√°s reintentos, lanzar la excepci√≥n
                if attempt == max_retries:
                    self.logger.error(
                        f"‚ùå Error despu√©s de {max_retries} intentos: {e}",
                        exc_info=True
                    )
                    raise
                
                # Calcular espera exponencial con jitter
                delay = min(
                    initial_delay * (2 ** attempt) * (0.5 * (1 + random.random())),
                    max_delay
                )
                
                self.logger.warning(
                    f"üîÑ Reintentando operaci√≥n {operation.__name__} en {delay:.2f}s "
                    f"(intento {attempt + 1}/{max_retries}): {e}"
                )
                
                time.sleep(delay)
        
        # Este punto no deber√≠a alcanzarse nunca debido al raise anterior
        raise RuntimeError("Error inesperado en _execute_with_retry")
    
    # ===== M√âTRICAS Y MONITOREO =====
    
    def _record_metrics(self, operation: str, response_time_ms: float) -> None:
        """Registra m√©tricas de rendimiento"""
        self._performance_metrics['calls'].append({
            'operation': operation,
            'timestamp': datetime.now().isoformat(),
            'response_time_ms': response_time_ms
        })
        
        # Mantener solo las √∫ltimas 1000 llamadas para evitar uso excesivo de memoria
        if len(self._performance_metrics['calls']) > 1000:
            self._performance_metrics['calls'] = self._performance_metrics['calls'][-1000:]
        
        # Actualizar estad√≠sticas de tiempo de respuesta
        self._performance_metrics['response_times'].append(response_time_ms)
        if len(self._performance_metrics['response_times']) > 1000:
            self._performance_metrics['response_times'] = self._performance_metrics['response_times'][-1000:]
    
    def _record_error(self, operation: str, error: str) -> None:
        """Registra un error en las m√©tricas"""
        self._performance_metrics['errors'].append({
            'operation': operation,
            'timestamp': datetime.now().isoformat(),
            'error': error
        })
        
        # Mantener solo los √∫ltimos 100 errores
        if len(self._performance_metrics['errors']) > 100:
            self._performance_metrics['errors'] = self._performance_metrics['errors'][-100:]
    
    def get_performance_metrics(self) -> Dict[str, Any]:
        """Obtiene m√©tricas de rendimiento"""
        response_times = self._performance_metrics['response_times']
        
        return {
            'total_calls': len(self._performance_metrics['calls']),
            'total_errors': len(self._performance_metrics['errors']),
            'error_rate': (
                len(self._performance_metrics['errors']) / 
                (len(self._performance_metrics['calls']) + 1e-10)
            ),
            'response_time': {
                'min': min(response_times, default=0),
                'max': max(response_times, default=0),
                'avg': sum(response_times) / len(response_times) if response_times else 0,
                'p50': statistics.quantiles(response_times, n=10)[4] if len(response_times) >= 2 else 0,
                'p90': statistics.quantiles(response_times, n=10)[8] if len(response_times) >= 10 else 0,
                'p99': statistics.quantiles(response_times, n=100)[98] if len(response_times) >= 100 else 0,
            },
            'circuit_breaker': {
                'is_open': self._circuit_state['is_open'],
                'failures': self._circuit_state['failures'],
                'last_failure': self._circuit_state['last_failure']
            },
            'cache': self.get_cache_stats()
        }
    
    def _initialize_connection(self) -> None:
        """Inicializa la conexi√≥n con Google Sheets con manejo de errores y circuit breaker"""
        if self._circuit_state.get('is_open', False) and not self._check_circuit():
            self.logger.error("üî¥ Circuit breaker abierto, no se puede conectar")
            raise CircuitBreakerError("El servicio no est√° disponible temporalmente")
            
        try:
            start_time = time.time()
            
            # Buscar archivo de credenciales en m√∫ltiples ubicaciones
            possible_paths = [
                Path('/etc/secrets/service_account.json'),  # Para Docker/Kubernetes
                Path(__file__).parents[4] / 'service_account.json',  # Ra√≠z del proyecto  
                Path(__file__).parents[3] / 'config' / 'service_account.json',
                Path(__file__).parents[3] / 'service_account.json',
                Path(__file__).parents[2] / 'config' / 'service_account.json',
                Path('service_account.json')
            ]
            
            credentials_path = None
            for path in possible_paths:
                if path.exists():
                    credentials_path = str(path.resolve())
                    self.logger.info(f"üìÅ Credenciales encontradas en: {credentials_path}")
                    break
                if path.exists():
                    credentials_path = str(path.resolve())
            
            # Configuraci√≥n de √°mbitos de acceso
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive',
                'https://www.googleapis.com/auth/spreadsheets'
            ]
            
            # Intenta cargar credenciales desde el archivo
            creds = None
            
            # Primero intentar usar el archivo encontrado
            if credentials_path:
                self.logger.info(f"üîë Cargando credenciales desde: {credentials_path}")
                creds = Credentials.from_service_account_file(
                    credentials_path,
                    scopes=scope
                )
            # Despu√©s, revisar otras ubicaciones
            elif Path.home().joinpath('.config/gspread/service_account.json').exists():
                creds_file = Path.home() / '.config/gspread/service_account.json'
                self.logger.info(f"üîë Cargando credenciales desde: {creds_file}")
                creds = Credentials.from_service_account_file(
                    str(creds_file),
                    scopes=scope
                )
            elif 'GOOGLE_CREDENTIALS_JSON' in os.environ:
                self.logger.info("üîë Cargando credenciales desde variable de entorno")
                creds = Credentials.from_service_account_info(
                    json.loads(os.environ['GOOGLE_CREDENTIALS_JSON']),
                    scopes=scope
                )
            else:
                error_msg = "‚ùå No se encontraron credenciales de Google Sheets en ninguna ubicaci√≥n"
                self.logger.error(error_msg)
                raise ValueError(error_msg)
            
            # Crear cliente con configuraci√≥n de timeout
            client = gspread.Client(auth=creds)
            
            # Configurar timeout (usando la sesi√≥n de autenticaci√≥n subyacente)
            if hasattr(creds, '_http'):
                creds._http.timeout = 30  # Timeout de 30 segundos
            
            # Guardar cliente
            self.gc = client
            
            # Inicializar la hoja espec√≠fica
            try:
                spreadsheet = self.gc.open_by_key(self.sheet_id)
                self.sheet = spreadsheet.worksheet("01_Clientes")  # Hoja espec√≠fica de clientes
                self.logger.info(f"üìã Hoja '01_Clientes' inicializada correctamente")
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è  No se pudo inicializar la hoja '01_Clientes': {e}")
                self.logger.info("üîÑ Intentando obtener la primera hoja disponible...")
                try:
                    spreadsheet = self.gc.open_by_key(self.sheet_id)
                    self.sheet = spreadsheet.get_worksheet(0)  # Primera hoja
                    self.logger.info(f"üìã Hoja '{self.sheet.title}' inicializada como fallback")
                except Exception as e2:
                    self.logger.error(f"‚ùå Error cr√≠tico al inicializar cualquier hoja: {e2}")
                    self.sheet = None
            
            self.initialized = True
            self.logger.info("‚úÖ Conexi√≥n con Google Sheets establecida correctamente")
            
        except GoogleAPIError as e:
            self._record_failure()
            self.logger.error(f"‚ùå Error de API de Google: {str(e)}")
            raise
        except Exception as e:
            self._record_failure()
            self.logger.error(f"‚ùå Error inesperado al inicializar conexi√≥n: {str(e)}")
            self.logger.error(f"‚ùå Error cr√≠tico al inicializar conexi√≥n: {e}", exc_info=True)
            raise
    
    # ===== OPERACIONES PRINCIPALES =====
    
    def get_all_rows(self, use_cache: bool = True) -> List[Dict[str, Any]]:
        """Obtiene todas las filas de la hoja de c√°lculo"""
        cache_key = self._get_cache_key('get_all_rows')
        
        # Intentar obtener del cach√© si est√° habilitado
        if use_cache:
            cached = self._get_from_cache(cache_key)
            if cached is not None:
                self.logger.debug("üì¶ Datos obtenidos del cach√©")
                return cached
        
        # Si no hay datos en cach√© o el cach√© est√° deshabilitado
        def _fetch_rows():
            try:
                # Obtener todas las filas
                rows = self.sheet.get_all_records()
                self.logger.info(f"üìä Se obtuvieron {len(rows)} filas de la hoja de c√°lculo")
                return rows
            except Exception as e:
                self.logger.error(f"‚ùå Error al obtener filas: {e}")
                raise
        
        # Ejecutar con reintentos
        rows = self._execute_with_retry(_fetch_rows)
        
        # Almacenar en cach√© si la operaci√≥n fue exitosa
        if rows is not None and use_cache:
            self._set_cache(cache_key, rows)
        
        return rows
    
    def get_row_by_id(self, row_id: int) -> Optional[Dict[str, Any]]:
        """Obtiene una fila por su ID"""
        def _fetch_row():
            try:
                # Obtener todas las celdas de la columna de ID
                ids = self.sheet.col_values(1)  # Asumiendo que el ID est√° en la primera columna
                
                # Buscar el ID
                for i, id_str in enumerate(ids[1:], start=2):  # Saltar el encabezado
                    try:
                        if int(id_str) == row_id:
                            # Obtener toda la fila
                            row = self.sheet.row_values(i)
                            headers = self.sheet.row_values(1)
                            return dict(zip(headers, row))
                    except (ValueError, IndexError):
                        continue
                
                return None
                
            except Exception as e:
                self.logger.error(f"‚ùå Error al buscar fila con ID {row_id}: {e}")
                raise
        
        return self._execute_with_retry(_fetch_row)
    
    def add_row(self, data: Dict[str, Any]) -> bool:
        """Agrega una nueva fila a la hoja de c√°lculo"""
        def _insert_row():
            try:
                # Obtener encabezados
                headers = self.sheet.row_values(1)
                
                # Preparar fila en el orden correcto
                row = []
                for header in headers:
                    row.append(str(data.get(header, '')))
                
                # Agregar fila al final
                self.sheet.append_row(row)
                
                # Invalidar cach√© de todas las filas
                self.clear_cache('get_all_rows')
                
                self.logger.info(f"‚úÖ Fila agregada exitosamente: {data}")
                return True
                
            except Exception as e:
                self.logger.error(f"‚ùå Error al agregar fila: {e}")
                raise
        
        return self._execute_with_retry(_insert_row)
    
    def update_row(self, row_id: int, data: Dict[str, Any]) -> bool:
        """Actualiza una fila existente"""
        def _update_row():
            try:
                # Obtener todas las celdas de la columna de ID
                ids = self.sheet.col_values(1)  # Asumiendo que el ID est√° en la primera columna
                
                # Buscar el ID
                for i, id_str in enumerate(ids[1:], start=2):  # Saltar el encabezado
                    try:
                        if int(id_str) == row_id:
                            # Obtener encabezados
                            headers = self.sheet.row_values(1)
                            
                            # Preparar actualizaci√≥n
                            updates = []
                            for j, header in enumerate(headers, start=1):
                                if header in data:
                                    updates.append({
                                        'range': f"{gspread.utils.rowcol_to_a1(i, j)}:{gspread.utils.rowcol_to_a1(i, j)}",
                                        'values': [[str(data[header])]]
                                    })
                            
                            # Aplicar actualizaciones
                            if updates:
                                self.sheet.batch_update(updates)
                                
                                # Invalidar cach√©
                                self.clear_cache()
                                
                                self.logger.info(f"‚úÖ Fila {row_id} actualizada exitosamente")
                                return True
                            
                            break
                            
                    except (ValueError, IndexError):
                        continue
                
                self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ la fila con ID {row_id}")
                return False
                
            except Exception as e:
                self.logger.error(f"‚ùå Error al actualizar fila {row_id}: {e}")
                raise
        
        return self._execute_with_retry(_update_row)
    
    def delete_row(self, row_id: int) -> bool:
        """Elimina una fila por su ID"""
        def _delete_row():
            try:
                # Obtener todas las celdas de la columna de ID
                ids = self.sheet.col_values(1)  # Asumiendo que el ID est√° en la primera columna
                
                # Buscar el ID
                for i, id_str in enumerate(ids[1:], start=2):  # Saltar el encabezado
                    try:
                        if int(id_str) == row_id:
                            # Eliminar fila
                            self.sheet.delete_rows(i)
                            
                            # Invalidar cach√©
                            self.clear_cache()
                            
                            self.logger.info(f"‚úÖ Fila {row_id} eliminada exitosamente")
                            return True
                            
                    except (ValueError, IndexError):
                        continue
                
                self.logger.warning(f"‚ö†Ô∏è No se encontr√≥ la fila con ID {row_id}")
                return False
                
            except Exception as e:
                self.logger.error(f"‚ùå Error al eliminar fila {row_id}: {e}")
                raise
        
        return self._execute_with_retry(_delete_row)
    
    def search_rows(self, query: str, column: Optional[str] = None) -> List[Dict[str, Any]]:
        """Busca filas que coincidan con el criterio de b√∫squeda"""
        def _search():
            try:
                # Obtener todas las filas
                rows = self.get_all_rows()
                
                # Si no hay filas, retornar lista vac√≠a
                if not rows:
                    return []
                
                # Filtrar filas que coincidan con la b√∫squeda
                query_lower = query.lower()
                results = []
                
                for row in rows:
                    # Si se especific√≥ una columna, buscar solo en esa columna
                    if column:
                        if column in row and query_lower in str(row[column]).lower():
                            results.append(row)
                    else:
                        # Buscar en todas las columnas
                        for value in row.values():
                            if query_lower in str(value).lower():
                                results.append(row)
                                break
                
                self.logger.info(f"üîç Encontradas {len(results)} coincidencias para '{query}'")
                return results
                
            except Exception as e:
                self.logger.error(f"‚ùå Error al buscar '{query}': {e}")
                raise
        
        return self._execute_with_retry(_search)
    
    def _get_cached_data(self, key: str):
        """Obtiene datos del cache si est√°n vigentes"""
        current_time = time.time()
        if (current_time - self._cache_timestamp < self._cache_duration and 
            key in self._cache):
            return self._cache[key]
        
        # Tambi√©n verificar el cach√© avanzado
        if key in self._cache:
            entry = self._cache[key]
            if hasattr(entry, 'value'):
                return entry.value
            
        return None
    
    def _set_cache_data(self, key: str, data):
        """Guarda datos en cache"""
        self._cache[key] = data
        self._cache_timestamp = time.time()
    
    def get_all_clients(self, include_inactive: bool = False) -> List[Dict[str, Any]]:
        """Obtiene todos los clientes con cache y manejo de errores"""
        cache_key = f"all_clients_{include_inactive}"
        cached_data = self._get_cached_data(cache_key)
        if cached_data:
            return cached_data
        
        def _get_records():
            if self.sheet is None:
                self.logger.warning("‚ö†Ô∏è  self.sheet is None, usando datos offline")
                return self._get_offline_data()
            
            try:
                self.logger.info("üîç Intentando obtener registros desde Google Sheets...")
                records = self.sheet.get_all_records()
                self.logger.info(f"üìä Obtenidos {len(records)} registros desde Google Sheets")
                self.logger.info(f"üîç Muestra de los primeros 2 registros: {records[:2] if records else 'Sin registros'}")
                
                # Si no hay registros reales, usar datos offline
                if not records:
                    self.logger.warning("‚ö†Ô∏è  No se encontraron registros en Google Sheets, usando datos offline")
                    return self._get_offline_data()
                
                # Mapear campos de la Google Sheet real a los campos esperados
                mapped_records = []
                for i, record in enumerate(records):
                    # Mapear los campos existentes a los esperados
                    mapped_record = {
                        "Nombre": record.get("Nombre", ""),
                        "Email": record.get("Email", ""),  # Este campo puede no existir
                        "Zona": record.get("Zona", ""),
                        "Tel√©fono": record.get("Tel√©fono", ""),
                        "Pago": record.get("Pago", record.get("Precio", record.get("Mensualidad", "0"))),  # Varios nombres posibles
                        "Activo (SI/NO)": record.get("Activo (SI/NO)", "SI"),
                        "ID Cliente": record.get("ID Cliente", ""),
                        "Inicio Contrato": record.get("Inicio Contrato", ""),
                        "Propietario": record.get("Propietario", "")
                    }
                    
                    # Solo incluir registros que tengan al menos nombre
                    if mapped_record["Nombre"].strip():
                        mapped_records.append(mapped_record)
                    elif i < 5:  # Log de los primeros registros vac√≠os para debug
                        self.logger.debug(f"üîç Registro {i} sin nombre v√°lido: {record}")
                
                self.logger.info(f"üìã Despu√©s del mapeo: {len(mapped_records)} registros v√°lidos")
                
                if not include_inactive:
                    # Filtrar solo clientes activos
                    active_records = []
                    for r in mapped_records:
                        activo = str(r.get('Activo (SI/NO)', '')).strip().lower()
                        if activo in ['si', 's√≠', 'yes', '1', 'true', 'activo']:
                            active_records.append(r)
                    self.logger.info(f"‚úÖ Clientes activos filtrados: {len(active_records)}")
                    return active_records
                
                return mapped_records
                
            except Exception as e:
                self.logger.error(f"‚ùå Error obteniendo registros de Google Sheets: {e}")
                return self._get_offline_data()

        try:
            data = self._execute_with_retry(_get_records)
            if data is not None:
                self._set_cache_data(cache_key, data)
                return data
            else:
                return self._get_offline_data()
        except Exception as e:
            self.logger.error(f"Error obteniendo clientes: {e}")
            return self._get_offline_data()

    def find_client_by_name(self, name: str) -> List[Dict[str, Any]]:
        """Busca clientes por nombre con optimizaci√≥n"""
        if not name or len(name.strip()) < 2:
            return []
        
        all_clients = self.get_all_clients()
        name = name.strip().lower()
        
        matching_clients = []
        search_fields = ["Nombre", "Email", "Zona", "Tel√©fono", "ID Cliente"]
        
        for client in all_clients:
            for field in search_fields:
                value = str(client.get(field, "")).strip().lower()
                if name in value and value:
                    matching_clients.append(client)
                    break
        
        return matching_clients
    
    def add_client(self, data: Dict[str, str]) -> bool:
        """Agrega cliente con validaci√≥n y manejo de errores"""
        def _add_row():
            if self.sheet is None:
                return False
            
            # Validar datos requeridos
            required_fields = ['Nombre']
            for field in required_fields:
                if not data.get(field, '').strip():
                    raise ValueError(f"Campo requerido faltante: {field}")
            
            # Preparar fila para insertar
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            row_data = [
                data.get('Nombre', ''),
                data.get('Email', ''),
                data.get('Zona', ''),
                data.get('Tel√©fono', ''),
                data.get('Pago', ''),
                'SI',  # Activo por defecto
                current_time,  # Fecha de alta
                data.get('Notas', f'Agregado via sistema el {current_time}')
            ]
            
            self.sheet.append_row(row_data)
            return True
        
        try:
            result = self._execute_with_retry(_add_row)
            if result:
                # Limpiar cache
                self._cache.clear()
                self.logger.info(f"‚úÖ Cliente agregado: {data.get('Nombre')}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error agregando cliente: {e}")
            return False
    
    def add_prospect(self, data: Dict[str, str]) -> bool:
        """Agrega prospecto a una hoja separada"""
        def _add_prospect_row():
            if self.gc is None:
                return False
            
            try:
                # Intentar acceder a hoja de prospectos, crearla si no existe
                try:
                    spreadsheet = self.gc.open_by_key(self.sheet_id)
                    prospects_sheet = spreadsheet.worksheet("Prospectos")
                except gspread.WorksheetNotFound:
                    # Crear hoja de prospectos
                    spreadsheet = self.gc.open_by_key(self.sheet_id)
                    prospects_sheet = spreadsheet.add_worksheet(
                        title="Prospectos", 
                        rows=1000, 
                        cols=10
                    )
                    # Agregar encabezados
                    headers = [
                        "Nombre", "Tel√©fono", "Zona", "Email", "Estado", 
                        "Fecha Contacto", "Notas", "Prioridad", "Origen", "Siguiente Acci√≥n"
                    ]
                    prospects_sheet.append_row(headers)
                
                # Agregar prospecto
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                row_data = [
                    data.get('Nombre', ''),
                    data.get('Tel√©fono', ''),
                    data.get('Zona', ''),
                    data.get('Email', ''),
                    'Nuevo',  # Estado inicial
                    current_time,
                    data.get('Notas', 'Prospecto agregado via chat'),
                    data.get('Prioridad', 'Media'),
                    'Sistema',
                    'Llamar para ofrecer servicios'
                ]
                
                prospects_sheet.append_row(row_data)
                return True
                
            except Exception as e:
                self.logger.error(f"Error en hoja de prospectos: {e}")
                return False
        
        try:
            result = self._execute_with_retry(_add_prospect_row)
            if result:
                self.logger.info(f"‚úÖ Prospecto agregado: {data.get('Nombre')}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error agregando prospecto: {e}")
            return False
    
    def get_prospects(self) -> List[Dict[str, Any]]:
        """Obtiene lista de prospectos"""
        def _get_prospects():
            if self.gc is None:
                return []
            
            try:
                spreadsheet = self.gc.open_by_key(self.sheet_id)
                prospects_sheet = spreadsheet.worksheet("Prospectos")
                return prospects_sheet.get_all_records()
            except gspread.WorksheetNotFound:
                return []
        
        try:
            cached_data = self._get_cached_data("prospects")
            if cached_data:
                return cached_data
            
            data = self._execute_with_retry(_get_prospects)
            if data:
                self._set_cache_data("prospects", data)
                return data
            return []
        except Exception as e:
            self.logger.error(f"Error obteniendo prospectos: {e}")
            return []
    
    def add_incident(self, data: Dict[str, str]) -> bool:
        """Agrega incidente a una hoja separada"""
        def _add_incident_row():
            if self.gc is None:
                return False
            
            try:
                # Intentar acceder a hoja de incidentes, crearla si no existe
                try:
                    spreadsheet = self.gc.open_by_key(self.sheet_id)
                    incidents_sheet = spreadsheet.worksheet("Incidentes")
                except gspread.WorksheetNotFound:
                    # Crear hoja de incidentes
                    spreadsheet = self.gc.open_by_key(self.sheet_id)
                    incidents_sheet = spreadsheet.add_worksheet(
                        title="Incidentes", 
                        rows=1000, 
                        cols=12
                    )
                    # Agregar encabezados
                    headers = [
                        "ID Cliente", "Cliente", "Tipo", "Descripci√≥n", "Prioridad",
                        "Zona", "Tel√©fono", "Estado", "Fecha Creaci√≥n", "T√©cnico Asignado",
                        "Fecha Resoluci√≥n", "Notas T√©cnico"
                    ]
                    incidents_sheet.append_row(headers)
                
                # Agregar incidente
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                row_data = [
                    data.get('ID Cliente', ''),
                    data.get('Cliente', ''),
                    data.get('Tipo', ''),
                    data.get('Descripci√≥n', ''),
                    data.get('Prioridad', 'Media'),
                    data.get('Zona', ''),
                    data.get('Tel√©fono', ''),
                    'Nuevo',  # Estado inicial
                    current_time,
                    'Sin asignar',  # T√©cnico
                    '',  # Fecha resoluci√≥n
                    f'Incidente creado via sistema el {current_time}'
                ]
                
                incidents_sheet.append_row(row_data)
                return True
                
            except Exception as e:
                self.logger.error(f"Error en hoja de incidentes: {e}")
                return False
        
        try:
            result = self._execute_with_retry(_add_incident_row)
            if result:
                self.logger.info(f"‚úÖ Incidente agregado para: {data.get('Cliente')}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error agregando incidente: {e}")
            return False
    
    def get_incidents(self) -> List[Dict[str, Any]]:
        """Obtiene lista de incidentes"""
        def _get_incidents():
            if self.gc is None:
                return []
            
            try:
                spreadsheet = self.gc.open_by_key(self.sheet_id)
                incidents_sheet = spreadsheet.worksheet("Incidentes")
                return incidents_sheet.get_all_records()
            except gspread.WorksheetNotFound:
                return []
        
        try:
            cached_data = self._get_cached_data("incidents")
            if cached_data:
                return cached_data
            
            data = self._execute_with_retry(_get_incidents)
            if data:
                self._set_cache_data("incidents", data)
                return data
            return []
        except Exception as e:
            self.logger.error(f"Error obteniendo incidentes: {e}")
            return []
    
    def deactivate_client(self, name: str) -> bool:
        """Marca cliente como inactivo (versi√≥n legacy)"""
        def _deactivate_client():
            if self.sheet is None:
                return False
            
            # Buscar cliente
            all_records = self.sheet.get_all_records()
            for i, record in enumerate(all_records, start=2):  # Empezar en fila 2
                record_name = str(record.get('Nombre', '')).strip().lower()
                if record_name == name.strip().lower():
                    # Marcar como inactivo en lugar de eliminar
                    activo_col = None
                    headers = self.sheet.row_values(1)
                    for j, header in enumerate(headers, start=1):
                        if 'activo' in header.lower():
                            activo_col = j
                            break
                    
                    if activo_col:
                        self.sheet.update_cell(i, activo_col, 'NO')
                    return True
            
            return False
        
        try:
            result = self._execute_with_retry(_deactivate_client)
            if result:
                self._cache.clear()  # Limpiar cache
                self.logger.info(f"‚úÖ Cliente desactivado: {name}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error desactivando cliente: {e}")
            return False
    
    def get_analytics(self) -> Dict[str, Any]:
        """Obtiene an√°lisis detallado del negocio"""
        clients = self.get_all_clients()
        prospects = self.get_prospects()
        
        analytics = {
            "total_clients": len(clients),
            "total_prospects": len(prospects),
            "zones": {},
            "packages": {"standard": 0, "premium": 0},
            "revenue": {"total": 0, "monthly_avg": 0},
            "recent_activity": []
        }
        
        total_revenue = 0
        payments = []
        
        for client in clients:
            # An√°lisis por zona
            zone = client.get('Zona', 'Sin zona').strip()
            if zone:
                analytics["zones"][zone] = analytics["zones"].get(zone, 0) + 1
            
            # An√°lisis de paquetes y revenue
            try:
                payment = client.get('Pago', '0')
                if payment:
                    payment_num = float(str(payment).replace('$', '').replace(',', '').strip())
                    total_revenue += payment_num
                    payments.append(payment_num)
                    
                    if payment_num > 300:
                        analytics["packages"]["premium"] += 1
                    else:
                        analytics["packages"]["standard"] += 1
            except:
                analytics["packages"]["standard"] += 1
        
        if payments:
            analytics["revenue"]["total"] = total_revenue
            analytics["revenue"]["monthly_avg"] = total_revenue / len(payments)
        
        return analytics
    
    def test_connection(self) -> Dict[str, Any]:
        """Prueba la conexi√≥n y retorna estado"""
        try:
            if self.sheet is None:
                self._initialize_connection()
            
            if self.sheet:
                # Intentar leer una celda
                test_read = self.sheet.get('A1')
                return {
                    "status": "connected",
                    "message": "‚úÖ Conexi√≥n exitosa a Google Sheets",
                    "sheet_id": self.sheet_id,
                    "test_read": test_read
                }
            else:
                return {
                    "status": "disconnected", 
                    "message": "‚ùå No se pudo conectar a Google Sheets",
                    "sheet_id": self.sheet_id
                }
        except Exception as e:
            return {
                "status": "error",
                "message": f"‚ùå Error de conexi√≥n: {str(e)}",
                "sheet_id": self.sheet_id
            }
    
    def _get_offline_data(self) -> List[Dict[str, Any]]:
        """Datos de ejemplo para modo offline"""
        return [
            {
                "Nombre": "Mar√≠a Garc√≠a",
                "Email": "maria@email.com", 
                "Zona": "Centro",
                "Tel√©fono": "555-0001",
                "Pago": "250",
                "Activo (SI/NO)": "SI"
            },
            {
                "Nombre": "Juan P√©rez", 
                "Email": "juan@email.com",
                "Zona": "Norte", 
                "Tel√©fono": "555-0002",
                "Pago": "350",
                "Activo (SI/NO)": "SI"
            },
            {
                "Nombre": "Ana L√≥pez",
                "Email": "ana@email.com",
                "Zona": "Sur",
                "Tel√©fono": "555-0003", 
                "Pago": "300",
                "Activo (SI/NO)": "SI"
            }
        ]
    
    def delete_client(self, client_name: str) -> bool:
        """Elimina un cliente por nombre"""
        def _delete_client_row():
            if self.gc is None or self.sheet is None:
                return False
            
            # Buscar fila del cliente
            all_records = self.sheet.get_all_records()
            for i, record in enumerate(all_records, start=2):  # start=2 porque fila 1 es header
                nombre = str(record.get('Nombre', '')).strip().lower()
                if nombre == client_name.strip().lower():
                    self.sheet.delete_rows(i)
                    return True
            return False
        
        try:
            result = self._execute_with_retry(_delete_client_row)
            if result:
                self._cache.clear()
                self.logger.info(f"‚úÖ Cliente eliminado: {client_name}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error eliminando cliente: {e}")
            return False
    
    def update_client(self, client_name: str, data: Dict[str, str]) -> bool:
        """Actualiza un cliente existente"""
        def _update_client_row():
            if self.gc is None or self.sheet is None:
                return False
            
            # Buscar fila del cliente
            all_records = self.sheet.get_all_records()
            for i, record in enumerate(all_records, start=2):  # start=2 porque fila 1 es header
                nombre = str(record.get('Nombre', '')).strip().lower()
                if nombre == client_name.strip().lower():
                    # Actualizar campos
                    headers = self.sheet.row_values(1)
                    for j, header in enumerate(headers, start=1):
                        if header in data:
                            self.sheet.update_cell(i, j, data[header])
                    return True
            return False
        
        try:
            result = self._execute_with_retry(_update_client_row)
            if result:
                self._cache.clear()
                self.logger.info(f"‚úÖ Cliente actualizado: {client_name}")
                return True
            return False
        except Exception as e:
            self.logger.error(f"‚ùå Error actualizando cliente: {e}")
            return False
    
    def get_clients_by_zone(self, zone: str) -> List[Dict[str, Any]]:
        """Obtiene clientes por zona"""
        all_clients = self.get_all_clients()
        return [client for client in all_clients if client.get('Zona', '').strip().lower() == zone.strip().lower()]
    
    def get_financial_summary(self) -> Dict[str, Any]:
        """Resumen financiero detallado"""
        clients = self.get_all_clients()
        
        total_revenue = 0
        active_clients = 0
        premium_clients = 0
        standard_clients = 0
        zones_revenue = {}
        
        for client in clients:
            # Calcular ingresos
            pago = client.get('Pago', 0)
            if isinstance(pago, str):
                try:
                    pago = float(pago.replace('$', '').replace(',', '').strip())
                except:
                    pago = 0
            total_revenue += pago
            
            # Contar clientes activos
            if str(client.get('Activo (SI/NO)', '')).lower() in ['si', 'yes', '1', 'true']:
                active_clients += 1
            
            # Clasificar por paquete (basado en pago)
            if pago >= 400:
                premium_clients += 1
            else:
                standard_clients += 1
            
            # Revenue por zona
            zona = client.get('Zona', 'Sin zona')
            if zona not in zones_revenue:
                zones_revenue[zona] = 0
            zones_revenue[zona] += pago
        
        return {
            "total_revenue": total_revenue,
            "monthly_revenue": total_revenue,  # Asumiendo que es mensual
            "annual_projection": total_revenue * 12,
            "active_clients": active_clients,
            "premium_clients": premium_clients,
            "standard_clients": standard_clients,
            "average_revenue_per_client": total_revenue / max(active_clients, 1),
            "zones_revenue": zones_revenue,
            "total_clients": len(clients)
        }

    # === M√âTODOS ASYNC PARA EL AGENTE INTELIGENTE ===
    
    async def get_clients_summary(self) -> List[Dict]:
        """Obtener resumen de clientes para el agente (async)"""
        try:
            return self.get_all_clients()
        except Exception as e:
            self.logger.error(f"Error getting clients summary: {e}")
            return []

    async def search_clients(self, query: str) -> List[Dict]:
        """Buscar clientes (async)"""
        try:
            all_clients = self.get_all_clients()
            query_lower = query.lower()
            
            filtered_clients = []
            for client in all_clients:
                if (query_lower in client.get('Nombre', '').lower() or
                    query_lower in client.get('Zona', '').lower() or
                    query_lower in str(client.get('Tel√©fono', '')).lower()):
                    filtered_clients.append(client)
            
            return filtered_clients
        except Exception as e:
            self.logger.error(f"Error searching clients: {e}")
            return []

    async def calculate_kpis(self) -> Dict:
        """Calcular KPIs del negocio (async)"""
        try:
            clients = self.get_all_clients()
            zones = set(client.get('Zona', '') for client in clients if client.get('Zona'))
            active_clients = [c for c in clients if c.get('Activo (SI/NO)', '').lower() == 'si']
            
            return {
                "total_clients": len(clients),
                "active_clients": len(active_clients),
                "total_zones": len(zones),
                "monthly_revenue": sum(c.get('paquete_info', {}).get('monthly', 0) for c in clients),
                "average_clients_per_zone": len(active_clients) / max(len(zones), 1)
            }
        except Exception as e:
            self.logger.error(f"Error calculating KPIs: {e}")
            return {}

    async def get_zones_data(self) -> List[Dict]:
        """Obtener datos de zonas (async)"""
        try:
            clients = self.get_all_clients()
            zones_data = {}
            
            for client in clients:
                zone = client.get('Zona', 'Sin Zona')
                if zone not in zones_data:
                    zones_data[zone] = {
                        "name": zone,
                        "clients": 0,
                        "active_clients": 0,
                        "revenue": 0
                    }
                
                zones_data[zone]["clients"] += 1
                if client.get('Activo (SI/NO)', '').lower() == 'si':
                    zones_data[zone]["active_clients"] += 1
                zones_data[zone]["revenue"] += client.get('paquete_info', {}).get('monthly', 0)
            
            return list(zones_data.values())
        except Exception as e:
            self.logger.error(f"Error getting zones data: {e}")
            return []

    async def calculate_revenue(self) -> Dict:
        """Calcular ingresos (async)"""
        try:
            clients = self.get_all_clients()
            total_revenue = sum(c.get('paquete_info', {}).get('monthly', 0) for c in clients)
            active_clients = [c for c in clients if c.get('Activo (SI/NO)', '').lower() == 'si']
            active_revenue = sum(c.get('paquete_info', {}).get('monthly', 0) for c in active_clients)
            
            return {
                "total_revenue": total_revenue,
                "active_revenue": active_revenue,
                "average_revenue_per_client": total_revenue / max(len(clients), 1),
                "projected_monthly": active_revenue
            }
        except Exception as e:
            self.logger.error(f"Error calculating revenue: {e}")
            return {}

    async def get_client_profile(self, client_id: str) -> Dict:
        """Obtener perfil completo de cliente (async)"""
        try:
            clients = self.get_all_clients()
            for client in clients:
                if client.get('ID Cliente') == client_id:
                    return {
                        **client,
                        "full_profile": True,
                        "last_updated": datetime.now().isoformat()
                    }
            return {}
        except Exception as e:
            self.logger.error(f"Error getting client profile: {e}")
            return {}

    async def get_client_history(self, client_id: str) -> List[Dict]:
        """Obtener historial de cliente (async - mock por ahora)"""
        try:
            # Por ahora retorna un mock, podr√≠as expandir esto con datos reales
            return [
                {
                    "date": datetime.now().isoformat(),
                    "action": "profile_viewed",
                    "details": f"Perfil del cliente {client_id} consultado"
                }
            ]
        except Exception as e:
            self.logger.error(f"Error getting client history: {e}")
            return []

    async def add_client_async(self, client_data: Dict) -> Dict:
        """Agregar cliente (async wrapper)"""
        try:
            result = self.add_client(client_data)
            return {"status": "success", "data": result}
        except Exception as e:
            self.logger.error(f"Error adding client: {e}")
            return {"status": "error", "message": str(e)}

    async def update_client_async(self, client_data: Dict) -> Dict:
        """Actualizar cliente (async wrapper)"""
        try:
            client_name = client_data.get('Nombre', '')
            result = self.update_client(client_name, client_data)
            return {"status": "success", "data": result}
        except Exception as e:
            self.logger.error(f"Error updating client: {e}")
            return {"status": "error", "message": str(e)}
