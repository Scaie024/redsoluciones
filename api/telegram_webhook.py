"""
ü§ñ Webhook endpoint para Telegram Bot en Vercel
Integraci√≥n COMPLETA con Red Soluciones ISP Backend
"""
import os
import json
import logging
import sys
from typing import Dict, Any
from datetime import datetime
from pathlib import Path

# Configurar paths para importar backend
current_dir = Path(__file__).parent
project_root = current_dir.parent
sys.path.insert(0, str(project_root))

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Token del bot de Telegram
TELEGRAM_BOT_TOKEN = "7881396575:AAHDbmSqXIVPSAK3asK9ieNhpbaS7iD3NZk"

# Importar servicios del backend
try:
    from backend.app.services.sheets.service import SheetsServiceV2 as SheetsService
    from backend.app.services.smart_agent import SmartISPAgent, get_smart_agent
    BACKEND_AVAILABLE = True
except ImportError as e:
    logger.warning(f"Backend no disponible: {e}")
    BACKEND_AVAILABLE = False

class TelegramISPBotAdvanced:
    """ü§ñ Bot de Telegram con integraci√≥n COMPLETA al backend ISP"""
    
    def __init__(self):
        self.bot_token = TELEGRAM_BOT_TOKEN
        self.user_sessions = {}  # Sesiones por usuario
        
        # Inicializar servicios del backend
        if BACKEND_AVAILABLE:
            try:
                self.sheets_service = SheetsService()
                self.smart_agent = SmartISPAgent(self.sheets_service)
                logger.info("‚úÖ Backend ISP conectado al bot de Telegram")
            except Exception as e:
                logger.error(f"Error conectando backend: {e}")
                self.sheets_service = None
                self.smart_agent = None
        else:
            self.sheets_service = None
            self.smart_agent = None
        
        # Estados de conversaci√≥n para operaciones complejas
        self.conversation_states = {
            "IDLE": "idle",
            "ADDING_CLIENT": "adding_client",
            "SEARCHING": "searching",
            "INCIDENT_REPORT": "incident_report",
            "PROSPECT_ENTRY": "prospect_entry"
        }
        
    def process_update(self, update_data: Dict[str, Any]) -> Dict[str, Any]:
        """Procesar update de Telegram con integraci√≥n completa"""
        try:
            # Extraer informaci√≥n del mensaje
            message = update_data.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '')
            user = message.get('from', {})
            
            if not chat_id or not text:
                return {"status": "ignored", "reason": "No chat_id or text"}
            
            user_id = user.get('id')
            user_name = user.get('first_name', 'Usuario')
            
            # Log de la interacci√≥n
            logger.info(f"üì± {user_name} ({user_id}): {text}")
            
            # Obtener estado de conversaci√≥n del usuario
            user_state = self.user_sessions.get(user_id, {}).get('state', 'IDLE')
            
            # Procesar seg√∫n el estado
            if user_state != 'IDLE':
                return self.handle_conversation_state(chat_id, text, user, user_state)
            
            # Procesar comandos y mensajes normales
            if text.startswith('/'):
                return self.handle_command(chat_id, text, user)
            else:
                return self.handle_intelligent_message(chat_id, text, user)
                
        except Exception as e:
            logger.error(f"Error procesando update: {e}")
            return self.send_message(chat_id, f"‚ùå Error interno: {str(e)}")
    
    def handle_command(self, chat_id: int, command: str, user: Dict) -> Dict[str, Any]:
        """Manejar comandos del bot con funcionalidad completa"""
        
        user_name = user.get('first_name', 'Usuario')
        
        if command == '/start':
            response = self.get_welcome_message_advanced(user_name)
            
        elif command == '/help':
            response = self.get_help_message_advanced()
            
        elif command == '/status':
            response = self.get_system_status()
            
        elif command == '/stats' or command == '/estadisticas':
            response = self.get_business_stats()
            
        elif command == '/clientes':
            response = self.get_clients_summary()
            
        elif command == '/add' or command == '/agregar':
            return self.start_add_client_flow(chat_id, user)
            
        elif command == '/buscar':
            return self.start_search_flow(chat_id, user)
            
        elif command == '/incidente':
            return self.start_incident_flow(chat_id, user)
            
        elif command == '/prospecto':
            return self.start_prospect_flow(chat_id, user)
            
        elif command == '/zonas':
            response = self.get_zones_info()
            
        elif command == '/analytics' or command == '/analisis':
            response = self.get_financial_analytics()
            
        else:
            response = f"‚ùì Comando no reconocido: {command}\n\nüìã Usa /help para ver todos los comandos disponibles"
        
        return self.send_message(chat_id, response)
    
    def handle_intelligent_message(self, chat_id: int, text: str, user: Dict) -> Dict[str, Any]:
        """Manejar mensajes usando el agente inteligente del backend"""
        
        if self.smart_agent:
            try:
                # Usar el agente inteligente del backend
                agent_response = self.smart_agent.process_query(text)
                
                response = agent_response.get('response', '‚ùå Sin respuesta del agente')
                suggestions = agent_response.get('suggestions', [])
                response_type = agent_response.get('type', 'general')
                
                # Agregar sugerencias si las hay
                if suggestions:
                    response += "\n\nÔøΩ **Sugerencias:**\n"
                    for i, suggestion in enumerate(suggestions[:3], 1):
                        response += f"{i}. {suggestion}\n"
                
                # Agregar ayuda contextual
                response += "\n\nü§ñ Tambi√©n puedes usar comandos como:\n"
                response += "‚Ä¢ /add - Agregar cliente\n"
                response += "‚Ä¢ /buscar - Buscar informaci√≥n\n"
                response += "‚Ä¢ /stats - Ver estad√≠sticas\n"
                response += "‚Ä¢ /help - Ayuda completa"
                
                return self.send_message(chat_id, response)
                
            except Exception as e:
                logger.error(f"Error con agente inteligente: {e}")
                return self.send_message(chat_id, 
                    f"‚ùå Error procesando con IA: {str(e)}\n\n" +
                    "üí° Intenta usar comandos espec√≠ficos como /help")
        else:
            # Fallback sin agente
            response = self.handle_message_fallback(text, user.get('first_name', ''))
            return self.send_message(chat_id, response)
    
    def handle_conversation_state(self, chat_id: int, text: str, user: Dict, state: str) -> Dict[str, Any]:
        """Manejar estados de conversaci√≥n para operaciones complejas"""
        user_id = user.get('id')
        
        if state == 'ADDING_CLIENT':
            return self.process_add_client_data(chat_id, text, user)
        elif state == 'SEARCHING':
            return self.process_search_query(chat_id, text, user)
        elif state == 'INCIDENT_REPORT':
            return self.process_incident_data(chat_id, text, user)
        elif state == 'PROSPECT_ENTRY':
            return self.process_prospect_data(chat_id, text, user)
        else:
            # Reset a estado idle
            if user_id in self.user_sessions:
                self.user_sessions[user_id]['state'] = 'IDLE'
            return self.handle_intelligent_message(chat_id, text, user)
    
    def start_add_client_flow(self, chat_id: int, user: Dict) -> Dict[str, Any]:
        """Iniciar flujo de agregar cliente"""
        user_id = user.get('id')
        self.user_sessions[user_id] = {
            'state': 'ADDING_CLIENT',
            'step': 1,
            'data': {}
        }
        
        response = """üÜï **Agregar Nuevo Cliente**

üìù Por favor, proporciona la informaci√≥n en este formato:

```
Nombre: Juan P√©rez
Email: juan@email.com
Zona: Norte
Tel√©fono: 555-1234
Pago: 400
```

üîÑ O env√≠a `/cancel` para cancelar"""

        return self.send_message(chat_id, response)
    
    def process_add_client_data(self, chat_id: int, text: str, user: Dict) -> Dict[str, Any]:
        """Procesar datos para agregar cliente"""
        user_id = user.get('id')
        
        if text.lower() == '/cancel':
            self.user_sessions[user_id]['state'] = 'IDLE'
            return self.send_message(chat_id, "‚ùå Operaci√≥n cancelada")
        
        try:
            # Parsear los datos del cliente
            client_data = {}
            lines = text.strip().split('\n')
            
            for line in lines:
                if ':' in line:
                    key, value = line.split(':', 1)
                    key = key.strip().lower()
                    value = value.strip()
                    
                    if 'nombre' in key:
                        client_data['nombre'] = value
                    elif 'email' in key:
                        client_data['email'] = value
                    elif 'zona' in key:
                        client_data['zona'] = value
                    elif 'tel√©fono' in key or 'telefono' in key:
                        client_data['telefono'] = value
                    elif 'pago' in key:
                        client_data['pago_mensual'] = float(value)
            
            # Validar datos m√≠nimos
            if not client_data.get('nombre'):
                return self.send_message(chat_id, "‚ùå Nombre requerido. Intenta de nuevo.")
            
            # Agregar cliente usando el backend
            if self.sheets_service:
                success = self.add_client_to_system(client_data)
                if success:
                    self.user_sessions[user_id]['state'] = 'IDLE'
                    response = f"‚úÖ **Cliente agregado exitosamente**\n\n" \
                             f"üë§ **Nombre**: {client_data['nombre']}\n" \
                             f"üìß **Email**: {client_data.get('email', 'N/A')}\n" \
                             f"üìç **Zona**: {client_data.get('zona', 'N/A')}\n" \
                             f"üìû **Tel√©fono**: {client_data.get('telefono', 'N/A')}\n" \
                             f"üí∞ **Pago**: ${client_data.get('pago_mensual', 0)}"
                    
                    return self.send_message(chat_id, response)
                else:
                    return self.send_message(chat_id, "‚ùå Error agregando cliente. Intenta de nuevo.")
            else:
                return self.send_message(chat_id, "‚ùå Servicio no disponible temporalmente")
                
        except Exception as e:
            logger.error(f"Error procesando datos de cliente: {e}")
            return self.send_message(chat_id, f"‚ùå Error procesando datos: {str(e)}\nIntenta de nuevo.")
    
    def add_client_to_system(self, client_data: Dict) -> bool:
        """Agregar cliente al sistema usando el backend"""
        try:
            if self.sheets_service:
                # Convertir al formato esperado por el sheets service
                sheet_data = {
                    "Nombre": client_data.get('nombre', ''),
                    "Email": client_data.get('email', ''),
                    "Zona": client_data.get('zona', ''),
                    "Tel√©fono": client_data.get('telefono', ''),
                    "Pago": client_data.get('pago_mensual', 0),
                    "Notas": "",
                    "Activo (SI/NO)": "SI",
                    "Fecha Registro": datetime.now().strftime("%Y-%m-%d")
                }
                
                return self.sheets_service.add_client(sheet_data)
            return False
        except Exception as e:
            logger.error(f"Error agregando cliente: {e}")
            return False
    
    def start_search_flow(self, chat_id: int, user: Dict) -> Dict[str, Any]:
        """Iniciar flujo de b√∫squeda"""
        response = """üîç **Buscar en el Sistema**

üí° Puedes buscar por:
‚Ä¢ Nombre del cliente
‚Ä¢ Zona
‚Ä¢ Tel√©fono
‚Ä¢ Email

‚úçÔ∏è Escribe tu consulta de b√∫squeda o /cancel para cancelar"""

        return self.send_message(chat_id, response)
    
    def process_search_query(self, chat_id: int, text: str, user: Dict) -> Dict[str, Any]:
        """Procesar b√∫squeda usando el agente inteligente"""
        if text.lower() == '/cancel':
            return self.send_message(chat_id, "‚ùå B√∫squeda cancelada")
        
        # Usar el agente para la b√∫squeda
        search_query = f"buscar {text}"
        return self.handle_intelligent_message(chat_id, search_query, user)
    
    def start_incident_flow(self, chat_id: int, user: Dict) -> Dict[str, Any]:
        """Iniciar flujo de reporte de incidentes"""
        response = """üö® **Reportar Incidente**

üìù Formato para reportar:

```
Cliente: Juan P√©rez
Tipo: T√©cnico
Descripci√≥n: Sin conexi√≥n a internet
Prioridad: Alta
```

üîÑ O env√≠a `/cancel` para cancelar"""

        return self.send_message(chat_id, response)
    
    def process_incident_data(self, chat_id: int, text: str, user: Dict) -> Dict[str, Any]:
        """Procesar datos de incidente"""
        if text.lower() == '/cancel':
            return self.send_message(chat_id, "‚ùå Reporte cancelado")
        
        # Procesar incidente con el agente
        incident_query = f"crear incidente {text}"
        return self.handle_intelligent_message(chat_id, incident_query, user)
    
    def start_prospect_flow(self, chat_id: int, user: Dict) -> Dict[str, Any]:
        """Iniciar flujo de agregar prospecto"""
        response = """üéØ **Agregar Prospecto**

üìù Formato para prospecto:

```
Nombre: Mar√≠a Garc√≠a
Tel√©fono: 555-5678
Zona: Centro
Email: maria@email.com
Notas: Interesada en plan premium
Prioridad: Alta
```

üîÑ O env√≠a `/cancel` para cancelar"""

        return self.send_message(chat_id, response)
    
    def process_prospect_data(self, chat_id: int, text: str, user: Dict) -> Dict[str, Any]:
        """Procesar datos de prospecto"""
        if text.lower() == '/cancel':
            return self.send_message(chat_id, "‚ùå Entrada cancelada")
        
        # Procesar prospecto con el agente
        prospect_query = f"agregar prospecto {text}"
        return self.handle_intelligent_message(chat_id, prospect_query, user)
    
    def get_welcome_message_advanced(self, name: str) -> str:
        """Mensaje de bienvenida completo"""
        return f"""üöÄ ¬°Bienvenido {name}!

üè¢ **Red Soluciones ISP - Control Total**
Tu bot para gesti√≥n completa del sistema ISP

üéØ **OPERACIONES DISPONIBLES:**

üìä **Consultas y An√°lisis:**
‚Ä¢ /stats - Estad√≠sticas del negocio
‚Ä¢ /clientes - Lista de clientes
‚Ä¢ /analytics - An√°lisis financiero
‚Ä¢ /zonas - Informaci√≥n de zonas

‚ûï **Agregar Datos:**
‚Ä¢ /add - Agregar nuevo cliente
‚Ä¢ /prospecto - Registrar prospecto
‚Ä¢ /incidente - Reportar incidente

üîç **B√∫squedas:**
‚Ä¢ /buscar - Buscar cualquier informaci√≥n
‚Ä¢ Pregunta directamente: "buscar cliente Juan"

üí¨ **Chat Inteligente:**
‚Ä¢ "estad√≠sticas del mes"
‚Ä¢ "an√°lisis financiero"
‚Ä¢ "clientes de la zona norte"
‚Ä¢ "¬øcu√°ntos clientes premium tengo?"

ü§ñ ¬°Powered by Gemini AI! - Todo tu sistema ISP en Telegram"""
    
    def get_help_message_advanced(self) -> str:
        """Mensaje de ayuda completo"""
        return """üÜò **Ayuda Completa - Red Soluciones ISP**

üéØ **COMANDOS PRINCIPALES:**

üìä **Informaci√≥n y Estad√≠sticas:**
‚Ä¢ `/stats` - Estad√≠sticas completas del negocio
‚Ä¢ `/clientes` - Resumen de clientes
‚Ä¢ `/analytics` - An√°lisis financiero detallado
‚Ä¢ `/zonas` - Informaci√≥n de cobertura
‚Ä¢ `/status` - Estado del sistema

‚ûï **Agregar/Crear:**
‚Ä¢ `/add` - Agregar nuevo cliente (paso a paso)
‚Ä¢ `/prospecto` - Registrar nuevo prospecto
‚Ä¢ `/incidente` - Reportar incidente t√©cnico

üîç **B√∫squedas:**
‚Ä¢ `/buscar` - B√∫squeda general
‚Ä¢ "buscar cliente [nombre]"
‚Ä¢ "clientes zona norte"
‚Ä¢ "pagos pendientes"

üí¨ **Chat Inteligente (Gemini AI):**
‚Ä¢ "¬øcu√°ntos clientes tengo?"
‚Ä¢ "an√°lisis de ingresos"
‚Ä¢ "clientes premium"
‚Ä¢ "estad√≠sticas por zona"
‚Ä¢ "oportunidades de crecimiento"

üéÆ **Ejemplos de Uso:**
1. Escribir: "estad√≠sticas del mes"
2. Comando: `/add` y seguir instrucciones
3. Buscar: "cliente Juan P√©rez"
4. An√°lisis: "¬øcu√°l es mi zona m√°s rentable?"

ü§ñ **Desarrollado con IA para Red Soluciones ISP**"""
    
    def get_system_status(self) -> str:
        """Estado del sistema"""
        backend_status = "‚úÖ Conectado" if self.smart_agent else "‚ùå Sin conexi√≥n"
        sheets_status = "‚úÖ Conectado" if self.sheets_service else "‚ùå Sin conexi√≥n"
        
        return f"""üîß **Estado del Sistema Red Soluciones ISP**

ü§ñ **Bot de Telegram**: ‚úÖ Activo
üß† **Agente Inteligente**: {backend_status}
üìä **Google Sheets**: {sheets_status}
‚ö° **API Backend**: ‚úÖ Funcional

üìà **Servicios Disponibles:**
‚Ä¢ Gesti√≥n de clientes
‚Ä¢ An√°lisis financiero
‚Ä¢ Reportes de incidentes
‚Ä¢ Chat con IA
‚Ä¢ B√∫squedas inteligentes

üïí **√öltima verificaci√≥n**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"""
    
    def get_business_stats(self) -> str:
        """Obtener estad√≠sticas usando el agente"""
        if self.smart_agent:
            try:
                stats_response = self.smart_agent.process_query("estad√≠sticas completas")
                return stats_response.get('response', '‚ùå Error obteniendo estad√≠sticas')
            except Exception as e:
                return f"‚ùå Error: {str(e)}"
        else:
            return "‚ùå Agente no disponible. Usa /status para verificar conexi√≥n."
    
    def get_clients_summary(self) -> str:
        """Obtener resumen de clientes"""
        if self.smart_agent:
            try:
                clients_response = self.smart_agent.process_query("mostrar todos los clientes")
                return clients_response.get('response', '‚ùå Error obteniendo clientes')
            except Exception as e:
                return f"‚ùå Error: {str(e)}"
        else:
            return "‚ùå Agente no disponible. Usa /status para verificar conexi√≥n."
    
    def get_zones_info(self) -> str:
        """Informaci√≥n de zonas"""
        if self.smart_agent:
            try:
                zones_response = self.smart_agent.process_query("informaci√≥n de zonas")
                return zones_response.get('response', '‚ùå Error obteniendo zonas')
            except Exception as e:
                return f"‚ùå Error: {str(e)}"
        else:
            return "‚ùå Agente no disponible. Usa /status para verificar conexi√≥n."
    
    def get_financial_analytics(self) -> str:
        """An√°lisis financiero"""
        if self.smart_agent:
            try:
                analytics_response = self.smart_agent.process_query("an√°lisis financiero completo")
                return analytics_response.get('response', '‚ùå Error en an√°lisis')
            except Exception as e:
                return f"‚ùå Error: {str(e)}"
        else:
            return "‚ùå Agente no disponible. Usa /status para verificar conexi√≥n."
    
    def handle_message_fallback(self, text: str, user_name: str) -> str:
        """Manejo de mensajes cuando no hay agente disponible"""
        text_lower = text.lower()
        
        if any(word in text_lower for word in ['hola', 'hi', 'buenos', 'buenas']):
            return f"¬°Hola {user_name}! üëã\n\nü§ñ Bot Red Soluciones ISP activado\n\nUsa /help para ver todas las opciones disponibles."
        
        elif any(word in text_lower for word in ['cliente', 'buscar', 'encontrar']):
            return "üîç **B√∫squeda de Clientes**\n\nUsa el comando `/buscar` para iniciar una b√∫squeda o `/clientes` para ver el resumen completo."
        
        elif any(word in text_lower for word in ['estad√≠stica', 'estadisticas', 'stats']):
            return "üìä **Estad√≠sticas del Negocio**\n\nUsa `/stats` para ver estad√≠sticas completas o `/analytics` para an√°lisis financiero."
        
        elif any(word in text_lower for word in ['agregar', 'a√±adir', 'nuevo']):
            return "‚ûï **Agregar al Sistema**\n\n‚Ä¢ `/add` - Nuevo cliente\n‚Ä¢ `/prospecto` - Nuevo prospecto\n‚Ä¢ `/incidente` - Reportar incidente"
        
        else:
            return f"ü§ñ Procesando: '{text}'\n\nüí° **Comandos disponibles:**\n‚Ä¢ `/help` - Ayuda completa\n‚Ä¢ `/stats` - Estad√≠sticas\n‚Ä¢ `/add` - Agregar cliente\n‚Ä¢ `/buscar` - Buscar informaci√≥n\n\nüß† Para mejor experiencia, aseg√∫rate de que el agente IA est√© conectado."
    
    def send_message(self, chat_id: int, text: str) -> Dict[str, Any]:
        """Preparar respuesta para enviar"""
        return {
            "method": "sendMessage",
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "Markdown"
        }

# Instancia global del handler
telegram_handler = TelegramISPBotAdvanced()

def handle_telegram_webhook(update_data: Dict[str, Any]) -> Dict[str, Any]:
    """Funci√≥n principal para manejar webhooks de Telegram"""
    return telegram_handler.process_update(update_data)

# Para testing local
if __name__ == "__main__":
    # Ejemplo de update de Telegram
    test_update = {
        "message": {
            "chat": {"id": 123456789},
            "text": "/start",
            "from": {"first_name": "Test", "id": 123456789}
        }
    }
    
    result = handle_telegram_webhook(test_update)
    print(json.dumps(result, indent=2, ensure_ascii=False))